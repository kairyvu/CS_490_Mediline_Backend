version: 2.1
orbs:
  python: circleci/python@2
jobs:
  build:
    docker:
      - image: cimg/python:3.12-node
    steps:
      - checkout
      - python/install-packages
      - run:
          name: Install dependencies
          command: |
            pip install -r requirements.txt
  lint:
    docker:
      - image: cimg/python:3.12-node
    steps:
      - checkout
      - python/install-packages
      - run:
          name: Install pylint
          command: pip install pylint
      - run:
          name: Run linters (pylint)
          command: pylint flaskr tests || true
  test:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - run:
          name: Install Python & pip
          command: |
            apt-get update && apt-get install -y python3-venv python3-pip
      - run:
          name: Create virtual environment
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
      - run:
          name: Set up Google Cloud credentials
          command: |
            echo "$GCLOUD_SERVICE_KEY" > gcloud-key.json
            gcloud auth activate-service-account --key-file=gcloud-key.json
            gcloud config set project $GCLOUD_PROJECT
            export GOOGLE_APPLICATION_CREDENTIALS=gcloud-key.json
      - run:
          name: Debug DEEPSEEK_API_KEY
          command: echo "Key set? ${DEEPSEEK_API_KEY:+yes}"
      - run:
          name: Run tests
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=gcloud-key.json
            . venv/bin/activate
            pytest --cov --junitxml=junit.xml || ((($? == 5)) && echo 'Did not find any tests to run.')
      - store_test_results:
          path: junit.xml
  build-and-push-docker-image:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Authenticate with GCP
          command: |
            echo "$GCLOUD_SERVICE_KEY" > gcloud-key.json
            gcloud auth activate-service-account --key-file=gcloud-key.json
            gcloud config set project $GCLOUD_PROJECT
            gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
      - run:
          name: Build and Push Docker Image to Artifact Registry
          command: |
            IMAGE_URI=us-central1-docker.pkg.dev/$GCLOUD_PROJECT/cloudrun-services/$CLOUDRUN_SERVICE:$CIRCLE_SHA1
            echo "IMAGE_URI=$IMAGE_URI" >> $BASH_ENV
            docker build -t $IMAGE_URI .
            docker push $IMAGE_URI
  deploy:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - run:
          name: Authenticate with GCP
          command: |
            echo "$GCLOUD_SERVICE_KEY" > gcloud-key.json
            gcloud auth activate-service-account --key-file=gcloud-key.json
            gcloud config set project $GCLOUD_PROJECT
      - run:
          name: Deploy to Cloud Run using Artifact Registry image
          command: |
            IMAGE_URI=us-central1-docker.pkg.dev/$GCLOUD_PROJECT/cloudrun-services/$CLOUDRUN_SERVICE:$CIRCLE_SHA1
            gcloud run deploy $CLOUDRUN_SERVICE \
              --image $IMAGE_URI \
              --region $CLOUDRUN_REGION \
              --platform managed \
              --allow-unauthenticated
workflows:
  build-and-test:
    when:
      or:
        - equal: [main, << pipeline.git.branch >>]
        - equal: [sandbox, << pipeline.git.branch >>]
        - equal: [circleci-project-setup, << pipeline.git.branch >>]
    jobs:
      - build
      - lint:
          requires:
            - build
      - test:
          requires:
            - build
      - build-and-push-docker-image:
          requires:
            - test
            - lint
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - build-and-push-docker-image
          filters:
            branches:
              only: main
