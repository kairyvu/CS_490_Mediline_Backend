Get the upcoming appointments for a user, either patient or doctor
---
tags: 
  - appointment
parameters:
  - name: user_id
    in: path
    type: integer
    required: true
    description: user id to look up
  - name: sort_by
    in: query
    type: string
    enum: 
      - appointment_details_id
      - treatment
      - start_date
      - end_date
      - status
    required: false
    description: set column to sort by
  - name: order_by
    in: query
    type: string
    enum: 
      - asc 
      - desc
    required: false
    description: set ascending or descending order
responses:
  200:
    description: A list of appointment details
    schema:
      type: array
      items: 
        type: object
        properties:
          appointment_id:
            type: integer
          doctor_id:
            type: integer
          doctor_name:
            type: string
          end_date:
            type: string
            format: date-time
          fee:
            type: number
            format: float
          patient_id:
            type: integer
          patient_name:
            type: string
          start_date:
            type: string
            format: date-time
          status:
            type: string
            enum:
              - CONFIRMED
          treatment:
            type: string
    examples:
      application/json:
        [
          {
            "appointment_id": 1,
            "doctor_id": 2,
            "doctor_name": "A A",
            "end_date": "2000-05-29T00:00:00",
            "fee": 3325,
            "patient_id": 3,
            "patient_name": "A A",
            "start_date": "2000-03-22T12:12:12",
            "status": "CONFIRMED",
            "treatment": "GREAT"
          }
        ]
  400:
    description: appointment for user not found or sort by error
    schema:
      type: object
      properties:
        error:
          type: string
    examples:
      application/json:
        { "error": "User not found as either patient or doctor" }